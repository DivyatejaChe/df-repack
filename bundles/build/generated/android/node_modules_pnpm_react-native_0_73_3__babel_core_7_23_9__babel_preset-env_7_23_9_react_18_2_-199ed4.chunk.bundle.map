{"version":3,"file":"node_modules_pnpm_react-native_0_73_3__babel_core_7_23_9__babel_preset-env_7_23_9_react_18_2_-199ed4.chunk.bundle","mappings":"8YAkB0BA,EAAAA,cAAG,WAA0C,IAAD,IAAAC,EAAAC,UAAAC,OAArCC,EAAK,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAALF,EAAKE,GAAAJ,UAAAI,GAGpC,MAAQ,CAACC,eAAgBH,EAC3B,EAEiCJ,EAAAA,qBAAG,SAClCQ,GAIA,MAAI,mBAAqBA,EAChBA,EAEF,IACT,EAE+BR,EAAAA,mBAAG,SAChCQ,GAEA,OAAOA,CACT,C,2BCxBAC,E,OAAAC,CAAAC,EAAA,OAkBAC,EAAOZ,QAhBP,SACEQ,GAEA,GAAqB,iBAAVA,GAA+B,MAATA,EAAe,CAC9C,IACMK,GAAkBC,EADOH,EAAQ,MAAhCG,sBACsCN,GAC7C,GAAuB,MAAnBK,EACF,OAAOA,CAEX,CAEA,GAAqB,iBAAVL,GAAuC,iBAAVA,EACtC,OAAO,EAAAO,EAAAA,SAAgBP,EAE3B,C,oCCrBaQ,OAAAA,eAAAA,EAAAA,aAAAA,CAAAC,OAAA,IAAAjB,EAAAA,aAAA,EAIb,IAAMkB,EAAWP,EAAQ,MACnBQ,EAAiBR,EAAQ,MAyC9BX,EAAAA,QApCD,SAAsBQ,GACpB,GAAIA,QACF,OAAOA,EAGT,IAAIK,EAAkBM,EAAeX,GACrC,GAAIK,QAAJ,CAIA,GAA+B,iBAApBA,EAA8B,CACvC,IAGMO,GAAoBC,EAFxBV,EAAAA,MAAAA,oBAE2CE,GAE7C,GAAyB,MAArBO,EACF,OAAOA,CAEX,CAEA,MAA+B,iBAApBP,EACF,MAITA,GAAoBA,GAAmB,GAAOA,IAAoB,KAAQ,EAEtD,YAAhBK,EAASI,KAKXT,GAAoC,GAE/BA,EA3BP,CA4BF,C,yFC5CA,IAAAU,EAA0E,SAAAC,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAAG,QAAAH,GAAA,IAAAI,EAAAC,EAAAJ,GAAA,GAAAG,GAAAA,EAAAE,IAAAN,GAAA,OAAAI,EAAAG,IAAAP,GAAA,IAAAQ,EAAA,CAAAC,UAAA,MAAAC,EAAAlB,OAAAmB,gBAAAnB,OAAAoB,yBAAA,QAAAC,KAAAb,EAAA,eAAAa,GAAArB,OAAAsB,UAAAC,eAAAC,KAAAhB,EAAAa,GAAA,KAAAI,EAAAP,EAAAlB,OAAAoB,yBAAAZ,EAAAa,GAAA,KAAAI,IAAAA,EAAAV,KAAAU,EAAAC,KAAA1B,OAAAmB,eAAAH,EAAAK,EAAAI,GAAAT,EAAAK,GAAAb,EAAAa,EAAA,QAAAL,EAAAL,QAAAH,EAAAI,GAAAA,EAAAc,IAAAlB,EAAAQ,GAAAA,CAAA,CAA1EW,CAAAhC,EAAA,OAA0E,SAAAkB,EAAAL,GAAA,sBAAAoB,QAAA,gBAAAnB,EAAA,IAAAmB,QAAAhB,EAAA,IAAAgB,QAAA,OAAAf,EAAA,SAAAL,GAAA,OAAAA,EAAAI,EAAAH,CAAA,GAAAD,EAAA,CAAAxB,EAAAA,QA6B1DuB,EAAoBsB,aAClC,oB,2BC3BFC,E,OAAApC,CAAAC,EAAA,OAEMO,EAAyB,CAC7B6B,YAAa,KACbzB,GAAI,UAEJ,WAAI0B,GAEF,OAAOC,KAAKC,UAAUF,OACxB,EAEA,aAAIE,GAyBF,OALwB,MAApBD,KAAKF,cAEPE,KAAKF,YAAcI,EAAAA,QAA+BC,gBAG7CH,KAAKF,WACd,EAEA,aAAIM,GAKF,OAAO,CACT,EAEA,uBAAIC,GAAgC,IAADC,EAEjC,OAAyC,OAAzCA,EAAON,KAAKC,UAAUI,qBAAmBC,EAAIN,KAAKI,SACpD,EAEA,QAAIG,GAEF,MAAiC,OAA1BP,KAAKC,UAAUO,MACxB,EACAC,OAAQ,SAAIC,GAA2B,MACrC,YAAaA,EAETA,EAAKC,QACL,WAAYD,EAEZA,EAAKE,OAELF,EAAKhC,OAAO,GAGpBf,EAAOZ,QAAUkB,C,mBC7EjBN,EAAOZ,QALP,SAAgC8D,GAC9B,OAAOA,GAAOA,EAAIpC,WAAaoC,EAAM,CACnC,QAAWA,EAEf,EACyClD,EAAOZ,QAAQ0B,YAAa,EAAMd,EAAOZ,QAAiB,QAAIY,EAAOZ,O","sources":["webpack:///../../../node_modules/.pnpm/react-native@0.73.3_@babel+core@7.23.9_@babel+preset-env@7.23.9_react@18.2.0/node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypes.android.js","webpack:///../../../node_modules/.pnpm/react-native@0.73.3_@babel+core@7.23.9_@babel+preset-env@7.23.9_react@18.2.0/node_modules/react-native/Libraries/StyleSheet/normalizeColor.js","webpack:///../../../node_modules/.pnpm/react-native@0.73.3_@babel+core@7.23.9_@babel+preset-env@7.23.9_react@18.2.0/node_modules/react-native/Libraries/StyleSheet/processColor.js","webpack:///../../../node_modules/.pnpm/react-native@0.73.3_@babel+core@7.23.9_@babel+preset-env@7.23.9_react@18.2.0/node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js","webpack:///../../../node_modules/.pnpm/react-native@0.73.3_@babel+core@7.23.9_@babel+preset-env@7.23.9_react@18.2.0/node_modules/react-native/Libraries/Utilities/Platform.android.js","webpack:///../../../node_modules/.pnpm/@babel+runtime@7.23.9/node_modules/@babel/runtime/helpers/interopRequireDefault.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ProcessedColorValue} from './processColor';\nimport type {ColorValue, NativeColorValue} from './StyleSheet';\n\n/** The actual type of the opaque NativeColorValue on Android platform */\ntype LocalNativeColorValue = {\n  resource_paths?: Array<string>,\n};\n\nexport const PlatformColor = (...names: Array<string>): ColorValue => {\n  /* $FlowExpectedError[incompatible-return]\n   * LocalNativeColorValue is the actual type of the opaque NativeColorValue on Android platform */\n  return ({resource_paths: names}: LocalNativeColorValue);\n};\n\nexport const normalizeColorObject = (\n  color: NativeColorValue,\n): ?ProcessedColorValue => {\n  /* $FlowExpectedError[incompatible-cast]\n   * LocalNativeColorValue is the actual type of the opaque NativeColorValue on Android platform */\n  if ('resource_paths' in (color: LocalNativeColorValue)) {\n    return color;\n  }\n  return null;\n};\n\nexport const processColorObject = (\n  color: NativeColorValue,\n): ?NativeColorValue => {\n  return color;\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n/* eslint no-bitwise: 0 */\n\nimport type {ProcessedColorValue} from './processColor';\nimport type {ColorValue} from './StyleSheet';\n\nimport _normalizeColor from '@react-native/normalize-colors';\n\nfunction normalizeColor(\n  color: ?(ColorValue | ProcessedColorValue),\n): ?ProcessedColorValue {\n  if (typeof color === 'object' && color != null) {\n    const {normalizeColorObject} = require('./PlatformColorValueTypes');\n    const normalizedColor = normalizeColorObject(color);\n    if (normalizedColor != null) {\n      return normalizedColor;\n    }\n  }\n\n  if (typeof color === 'string' || typeof color === 'number') {\n    return _normalizeColor(color);\n  }\n}\n\nmodule.exports = normalizeColor;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ColorValue, NativeColorValue} from './StyleSheet';\n\nconst Platform = require('../Utilities/Platform');\nconst normalizeColor = require('./normalizeColor');\n\nexport type ProcessedColorValue = number | NativeColorValue;\n\n/* eslint no-bitwise: 0 */\nfunction processColor(color?: ?(number | ColorValue)): ?ProcessedColorValue {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  let normalizedColor = normalizeColor(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor === 'object') {\n    const processColorObject =\n      require('./PlatformColorValueTypes').processColorObject;\n\n    const processedColorObj = processColorObject(normalizedColor);\n\n    if (processedColorObj != null) {\n      return processedColorObj;\n    }\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  // Converts 0xrrggbbaa into 0xaarrggbb\n  normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0;\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n  return normalizedColor;\n}\n\nexport default processColor;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../TurboModule/RCTExport';\n\nimport * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';\n\nexport type ReactNativeVersionAndroid = {|\n  major: number,\n  minor: number,\n  patch: number,\n  prerelease: ?number,\n|};\n\nexport type PlatformConstantsAndroid = {|\n  isTesting: boolean,\n  isDisableAnimations?: boolean,\n  reactNativeVersion: ReactNativeVersionAndroid,\n  Version: number,\n  Release: string,\n  Serial: string,\n  Fingerprint: string,\n  Model: string,\n  ServerHost?: string,\n  uiMode: string,\n  Brand: string,\n  Manufacturer: string,\n|};\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => PlatformConstantsAndroid;\n  +getAndroidID: () => string;\n}\n\nexport default (TurboModuleRegistry.getEnforcing<Spec>(\n  'PlatformConstants',\n): Spec);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport type {\n  Platform as PlatformType,\n  PlatformSelectSpec,\n} from './Platform.flow';\n\nimport NativePlatformConstantsAndroid from './NativePlatformConstantsAndroid';\n\nconst Platform: PlatformType = {\n  __constants: null,\n  OS: 'android',\n  // $FlowFixMe[unsafe-getters-setters]\n  get Version(): number {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.Version;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get constants(): {|\n    isTesting: boolean,\n    isDisableAnimations?: boolean,\n    reactNativeVersion: {|\n      major: number,\n      minor: number,\n      patch: number,\n      prerelease: ?number,\n    |},\n    Version: number,\n    Release: string,\n    Serial: string,\n    Fingerprint: string,\n    Model: string,\n    ServerHost?: string,\n    uiMode: string,\n    Brand: string,\n    Manufacturer: string,\n  |} {\n    // $FlowFixMe[object-this-reference]\n    if (this.__constants == null) {\n      // $FlowFixMe[object-this-reference]\n      this.__constants = NativePlatformConstantsAndroid.getConstants();\n    }\n    // $FlowFixMe[object-this-reference]\n    return this.__constants;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTesting(): boolean {\n    if (__DEV__) {\n      // $FlowFixMe[object-this-reference]\n      return this.constants.isTesting;\n    }\n    return false;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isDisableAnimations(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.isDisableAnimations ?? this.isTesting;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTV(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.uiMode === 'tv';\n  },\n  select: <T>(spec: PlatformSelectSpec<T>): T =>\n    'android' in spec\n      ? // $FlowFixMe[incompatible-return]\n        spec.android\n      : 'native' in spec\n      ? // $FlowFixMe[incompatible-return]\n        spec.native\n      : // $FlowFixMe[incompatible-return]\n        spec.default,\n};\n\nmodule.exports = Platform;\n","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["exports","_len","arguments","length","names","Array","_key","resource_paths","color","_normalizeColors","_interopRequireDefault","require","module","normalizedColor","normalizeColorObject","_normalizeColor","Object","value","Platform","normalizeColor","processedColorObj","processColorObject","OS","TurboModuleRegistry","e","r","__esModule","default","t","_getRequireWildcardCache","has","get","n","__proto__","a","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","WeakMap","getEnforcing","_NativePlatformConstantsAndroid","__constants","Version","this","constants","NativePlatformConstantsAndroid","getConstants","isTesting","isDisableAnimations","_this$constants$isDis","isTV","uiMode","select","spec","android","native","obj"],"sourceRoot":""}