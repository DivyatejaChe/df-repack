{"version":3,"file":"node_modules_react-native_Libraries_NativeComponent_ViewConfigIgnore_js.chunk.bundle","mappings":"2TAoCO,SACLA,GAEA,GAAoB,QAAhBC,EAAAA,QAASC,GACX,OAAOF,EAET,MACF,E,sCAzBO,SAAuDG,GAE5D,OADAC,EAAuBC,IAAIF,GACpBA,CACT,E,YAwBO,SAAmBH,GACxB,GAAqB,iBAAVA,GAA+B,MAATA,EAC/B,OAAOI,EAAuBE,IAAIN,GAEpC,OAAO,CACT,EAxCA,IAAAO,EAAAC,EAAAC,EAAA,OAEML,EAAyB,IAAIM,O,yFCAnC,IAAAC,EAA0E,SAAAC,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAAG,QAAAH,GAAA,IAAAI,EAAAC,EAAAJ,GAAA,GAAAG,GAAAA,EAAAV,IAAAM,GAAA,OAAAI,EAAAE,IAAAN,GAAA,IAAAO,EAAA,CAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAb,EAAA,eAAAa,GAAAH,OAAAI,UAAAC,eAAAC,KAAAhB,EAAAa,GAAA,KAAAI,EAAAR,EAAAC,OAAAE,yBAAAZ,EAAAa,GAAA,KAAAI,IAAAA,EAAAX,KAAAW,EAAAC,KAAAR,OAAAC,eAAAJ,EAAAM,EAAAI,GAAAV,EAAAM,GAAAb,EAAAa,EAAA,QAAAN,EAAAJ,QAAAH,EAAAI,GAAAA,EAAAc,IAAAlB,EAAAO,GAAAA,CAAA,CAA1EY,CAAAtB,EAAA,OAA0E,SAAAQ,EAAAL,GAAA,sBAAAoB,QAAA,gBAAAnB,EAAA,IAAAmB,QAAAhB,EAAA,IAAAgB,QAAA,OAAAf,EAAA,SAAAL,GAAA,OAAAA,EAAAI,EAAAH,CAAA,GAAAD,EAAA,CAAAqB,EAAAA,QA6B1DtB,EAAoBuB,aAClC,oB,2BC3BFC,E,OAAA3B,CAAAC,EAAA,OAEMR,EAAyB,CAC7BmC,YAAa,KACblC,GAAI,UAEJ,WAAImC,GAEF,OAAOC,KAAKC,UAAUF,OACxB,EAEA,aAAIE,GAyBF,OALwB,MAApBD,KAAKF,cAEPE,KAAKF,YAAcI,EAAAA,QAA+BC,gBAG7CH,KAAKF,WACd,EAEA,aAAIM,GAKF,OAAO,CACT,EAEA,uBAAIC,GAAgC,IAADC,EAEjC,OAAyC,OAAzCA,EAAON,KAAKC,UAAUI,qBAAmBC,EAAIN,KAAKI,SACpD,EAEA,QAAIG,GAEF,MAAiC,OAA1BP,KAAKC,UAAUO,MACxB,EACAC,OAAQ,SAAIC,GAA2B,MACrC,YAAaA,EAETA,EAAKC,QACL,WAAYD,EAEZA,EAAKE,OAELF,EAAKjC,OAAO,GAGpBoC,EAAOlB,QAAUhC,C,mBC7EjBkD,EAAOlB,QALP,SAAgCmB,GAC9B,OAAOA,GAAOA,EAAItC,WAAasC,EAAM,CACnC,QAAWA,EAEf,EACyCD,EAAOlB,QAAQnB,YAAa,EAAMqC,EAAOlB,QAAiB,QAAIkB,EAAOlB,O","sources":["webpack:///./node_modules/react-native/Libraries/NativeComponent/ViewConfigIgnore.js","webpack:///./node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js","webpack:///./node_modules/react-native/Libraries/Utilities/Platform.android.js","webpack:///./node_modules/@babel/runtime/helpers/interopRequireDefault.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport Platform from '../Utilities/Platform';\n\nconst ignoredViewConfigProps = new WeakSet<{...}>();\n\n/**\n * Decorates ViewConfig values that are dynamically injected by the library,\n * react-native-gesture-handler. (T45765076)\n */\nexport function DynamicallyInjectedByGestureHandler<T: {...}>(object: T): T {\n  ignoredViewConfigProps.add(object);\n  return object;\n}\n\n/**\n * On iOS, ViewManager event declarations generate {eventName}: true entries\n * in ViewConfig valueAttributes. These entries aren't generated for Android.\n * This annotation allows Static ViewConfigs to insert these entries into\n * iOS but not Android.\n *\n * In the future, we want to remove this platform-inconsistency. We want\n * to set RN$ViewConfigEventValidAttributesDisabled = true server-side,\n * so that iOS does not generate validAttributes from event props in iOS RCTViewManager,\n * since Android does not generate validAttributes from events props in Android ViewManager.\n *\n * TODO(T110872225): Remove this logic, after achieving platform-consistency\n */\nexport function ConditionallyIgnoredEventHandlers<T: {[name: string]: true}>(\n  value: T,\n): T | void {\n  if (Platform.OS === 'ios') {\n    return value;\n  }\n  return undefined;\n}\n\nexport function isIgnored(value: mixed): boolean {\n  if (typeof value === 'object' && value != null) {\n    return ignoredViewConfigProps.has(value);\n  }\n  return false;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../TurboModule/RCTExport';\n\nimport * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';\n\nexport type ReactNativeVersionAndroid = {|\n  major: number,\n  minor: number,\n  patch: number,\n  prerelease: ?number,\n|};\n\nexport type PlatformConstantsAndroid = {|\n  isTesting: boolean,\n  isDisableAnimations?: boolean,\n  reactNativeVersion: ReactNativeVersionAndroid,\n  Version: number,\n  Release: string,\n  Serial: string,\n  Fingerprint: string,\n  Model: string,\n  ServerHost?: string,\n  uiMode: string,\n  Brand: string,\n  Manufacturer: string,\n|};\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => PlatformConstantsAndroid;\n  +getAndroidID: () => string;\n}\n\nexport default (TurboModuleRegistry.getEnforcing<Spec>(\n  'PlatformConstants',\n): Spec);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport type {\n  Platform as PlatformType,\n  PlatformSelectSpec,\n} from './Platform.flow';\n\nimport NativePlatformConstantsAndroid from './NativePlatformConstantsAndroid';\n\nconst Platform: PlatformType = {\n  __constants: null,\n  OS: 'android',\n  // $FlowFixMe[unsafe-getters-setters]\n  get Version(): number {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.Version;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get constants(): {|\n    isTesting: boolean,\n    isDisableAnimations?: boolean,\n    reactNativeVersion: {|\n      major: number,\n      minor: number,\n      patch: number,\n      prerelease: ?number,\n    |},\n    Version: number,\n    Release: string,\n    Serial: string,\n    Fingerprint: string,\n    Model: string,\n    ServerHost?: string,\n    uiMode: string,\n    Brand: string,\n    Manufacturer: string,\n  |} {\n    // $FlowFixMe[object-this-reference]\n    if (this.__constants == null) {\n      // $FlowFixMe[object-this-reference]\n      this.__constants = NativePlatformConstantsAndroid.getConstants();\n    }\n    // $FlowFixMe[object-this-reference]\n    return this.__constants;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTesting(): boolean {\n    if (__DEV__) {\n      // $FlowFixMe[object-this-reference]\n      return this.constants.isTesting;\n    }\n    return false;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isDisableAnimations(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.isDisableAnimations ?? this.isTesting;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTV(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.uiMode === 'tv';\n  },\n  select: <T>(spec: PlatformSelectSpec<T>): T =>\n    'android' in spec\n      ? // $FlowFixMe[incompatible-return]\n        spec.android\n      : 'native' in spec\n      ? // $FlowFixMe[incompatible-return]\n        spec.native\n      : // $FlowFixMe[incompatible-return]\n        spec.default,\n};\n\nmodule.exports = Platform;\n","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["value","Platform","OS","object","ignoredViewConfigProps","add","has","_Platform","_interopRequireDefault","require","WeakSet","TurboModuleRegistry","e","r","__esModule","default","t","_getRequireWildcardCache","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","WeakMap","exports","getEnforcing","_NativePlatformConstantsAndroid","__constants","Version","this","constants","NativePlatformConstantsAndroid","getConstants","isTesting","isDisableAnimations","_this$constants$isDis","isTV","uiMode","select","spec","android","native","module","obj"],"sourceRoot":""}